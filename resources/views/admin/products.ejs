<!-- Assuming you have an array of products passed to the EJS template as 'products' -->

<style>
    .orders{
        margin-left: 270px;
    }
    
    .table-container {
        border: 1px solid #ddd; /* Border for the entire table */
    }

    th {
        background-color: lightblue; /* Background color for the header cells */
    }

    tr:nth-child(even) {
        background-color: lightgrey; /* Background color for every second row */
    }

    td, th {
        border: 1px solid #ddd; /* Border for each cell */
        padding: 8px; /* Adjust the padding as needed */
        text-align: left;
    }
    .editable {
        border: 1px solid #ddd;
        padding: 8px;
    }

</style>

<%- include('../components/sidebar') %>

  
  <!-- Add Product Modal -->
  <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          <form id="addProductForm" enctype="multipart/form-data">
            <div class="form-group">
              <label for="productName">Name</label>
              <input type="text" class="form-control" id="productName" required>
            </div>
            <div class="form-group">
              <label for="productComment">Kommentar</label>
              <input type="text" class="form-control" id="productComment" required>
            </div>
            <div class="form-group">
              <label for="productPrice">Preis (€)</label>
              <input type="number" step="0.10" class="form-control" id="productPrice" required>
            </div>
            <div class="form-group">
                <label for="productSizes">Größen</label>
                <input type="text" class="form-control" id="productSizes" required>
            </div>
            <div class="form-group">
                <label for="productLabel">Label</label>
                <input type="text" class="form-control" id="productLabel" required>
            </div>
            <div class="form-group">
                <label for="productImages">Bilder</label>
                <input type="file" class="form-control" id="productImages" name="image" required>
            </div>
          </form>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick=addProduct()>Add Product</button>
        </div>
      </div>
    </div>
  </div>
  

<section class="orders light-section">
    
    <div class="container mx-auto pt-12 pb-2 table-container">
        <h1 class="font-bold text-lg mb-4 margin align-center">All Products</h1>
        <button type="button" class="btn btn-primary" data-toggle="modal" data-target="#addProductModal">
            Add Product
        </button>
        <div class="search-container">
            <form action="/admin/products/search" method="GET">
                <input
                    type="text"
                    name="name"
                    comment="comment"
                    id="search-input"
                    class="search-input"
                    placeholder="Search products"
                />
                <button type="submit" class="search-button">
                    <span>&#128269;</span>
                </button>
            </form>
        </div>
        
        <table class="w-full table-auto bg-white">
            <thead>
                <tr>
                    <th class="px-4 py-2">Name</th>
                    <th class="px-4 py-2">Comment</th>
                    <th class="px-4 py-2">Unit Price (€)</th>
                    <th class="px-4 py-2">Sizes</th>
                    <th class="px-4 py-2">Label</th>
                    <th class="px-4 py-2">Label expiry</th>
                </tr>
            </thead>
            <tbody>
                <%products.forEach((product, index) => { %>
                    <tr class="row-<%= index %>">
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">
                            <a href="/admin/product/<%= product._id %>"><%= product.name %></a>
                        </td>            
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.comment %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.price %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.sizes %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">
                            <%= product.availability %>
                        </td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">    <%= product.expiry ? product.expiry.toLocaleDateString('en-GB') : '' %></td>
                        <td>
                            <button class="edit-button" data-product-id="<%= product._id %>" data-row-index="<%= index %>">Edit</button>
                            <button class="delete-button" data-product-id="<%= product._id %>" data-row-index="<%= index %>">Delete</button>
                        </td>
                    </tr>
                <% }); %>
            </tbody>
            
        </table>

    </div>
    <% 
    // Calculate the starting and ending page numbers for the pagination
    let pageStart = Math.max(currentPage - 2, 1);
    let pageEnd = Math.min(currentPage + 2, totalPages);
%>

<div class="pagination-container">
    <!-- Previous Page Link -->
    <a href="<%= currentPage > 1 ? `/menu?page=${currentPage - 1}` : '#' %>"
       class="pagination-button <%= currentPage === 1 ? 'disabled' : '' %>">
        &#10094;
    </a>

    <!-- First Page and Ellipsis if necessary -->
    <% if (pageStart > 1) { %>
        <a href="/admin/products?page=1" class="pagination-button">1</a>
        <% if (pageStart > 2) { %>
            <span class="pagination-ellipsis">...</span>
        <% } %>
    <% } %>

    <!-- Page Numbers -->
    <% for(let i = pageStart; i <= pageEnd; i++) { %>
        <a href="/admin/products?page=<%= i %>"
           class="pagination-button <%= i === currentPage ? 'active' : '' %>">
            <%= i %>
        </a>
    <% } %>

    <!-- Ellipsis and Last Page -->
    <% if (pageEnd < totalPages) { %>
        <% if (pageEnd < totalPages - 1) { %>
            <span class="pagination-ellipsis">...</span>
        <% } %>
        <a href="/admin/products?page=<%= totalPages %>" class="pagination-button"><%= totalPages %></a>
    <% } %>

    <!-- Next Page Link -->
    <a href="<%= currentPage < totalPages ? `/admin/products?page=${currentPage + 1}` : '#' %>"
       class="pagination-button <%= currentPage === totalPages ? 'disabled' : '' %>">
        &#10095;
    </a>
</div>

<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmationModalLabel">Confirm Deletion</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this product?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
    
<style>

.edit-button, .delete-button {
    margin-right: 5px;
    padding: 5px 10px;
    font-size: 14px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}
.edit-button {
    background-color: #4CAF50; /* Green */
    color: white;
}

.delete-button {
    background-color: #f44336; /* Red */
    color: white;
}
.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
}
.pagination-button {
    display: inline-block;
    padding: 8px 16px;
    margin: 0 5px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 50%;
    transition: background-color 0.3s, border-color 0.3s;
}
.pagination-button:hover:not(.disabled) {
    cursor: pointer;
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}
.pagination-button.active {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}
.pagination-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
.pagination-ellipsis {
    color: #333;
    padding: 8px 16px;
}
</style>
    


<script>
    var productsData = <%- JSON.stringify(products) %>;

    //search query 
    document.addEventListener('DOMContentLoaded', function () {
           const table = document.querySelector('table');
    const searchInput = document.getElementById('search-input');

    searchInput.addEventListener('input', function () {
        const searchTerm = searchInput.value.trim().toLowerCase();

        // Replace 'products' with 'productsData'
        productsData.forEach(function (product, index) {
            const productName = product.name.toLowerCase();
            const productComment = product.comment.toLowerCase();

            const productRow = document.querySelector(`table tbody tr:nth-child(${index + 1})`);
            if (productName.includes(searchTerm) || productComment.includes(searchTerm)) {
                productRow.style.display = ''; // Show the row
            } else {
                productRow.style.display = 'none'; // Hide the row
            }
        });
    });

    let currentProductId = null; // Temporary storage for the product ID to be deleted

    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-button')) {
            currentProductId = event.target.getAttribute('data-product-id'); // Store the product ID
            $('#confirmationModal').modal('show'); // Show the confirmation modal
        }
    });

    // Confirm deletion
    document.getElementById('confirmDelete').addEventListener('click', function() {
        if (currentProductId) {
            fetch(`/admin/products/delete/${currentProductId}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    alert('Product deleted successfully');
                    $('#confirmationModal').modal('hide'); // Hide the modal
                    // Optionally, remove the row from the table or update the UI
                } else {
                    alert('There was an error deleting the product');
                }
                currentProductId = null; // Reset the currentProductId
            })
            .catch(error => {
                console.error('Error:', error);
                currentProductId = null; // Reset the currentProductId
            });
        }
    });
});


function toggleRowEdit(rowIndex, button) {
    var cells = document.querySelectorAll('.row-' + rowIndex + ' .editable');
    var isEditing = button.textContent === 'Edit';

    if (isEditing) {
        // Switch to edit mode
        cells.forEach(cell => cell.setAttribute('contenteditable', 'true'));
        button.textContent = 'Save';
    } else {
        // Save changes
        var editedData = {
            productId: cells[0].getAttribute('data-product-id'), // Assuming first cell contains the product ID
            rowIndex: rowIndex,
            editedValues: Array.from(cells).map(cell => cell.textContent) // Get text from each cell
        };

        // Send data to server
        updateProduct(editedData);

        // Switch back to view mode
        cells.forEach(cell => cell.setAttribute('contenteditable', 'false'));
        button.textContent = 'Edit';
    }
}


function updateProduct(data) {
    fetch('/change-product', { // Replace with the actual URL
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: data.productId,
            rowIndex: data.rowIndex,
            editedValue: {
                name: data.editedValues[0], // Assuming first cell is 'name'
                comment: data.editedValues[1], // Assuming second cell is 'comment'
                price: data.editedValues[2], // Assuming third cell is 'price'
                sizes: data.editedValues[3], // Assuming fourth cell is 'sizes'
                availability: data.editedValues[4] // Assuming fifth cell is 'availability'
            }
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}



    // Add event listeners to edit buttons
    document.querySelectorAll('.edit-button').forEach(function(button) {
        button.addEventListener('click', function() {
            var rowIndex = this.getAttribute('data-row-index');
            toggleRowEdit(rowIndex, this);
        });
    });

    function addProduct() {
  // Create FormData object
  var formData = new FormData();
  formData.append('name', document.getElementById('productName').value);
  formData.append('comment', document.getElementById('productComment').value);
  formData.append('label', document.getElementById('productLabel').value);
  formData.append('price', document.getElementById('productPrice').value);
  formData.append('sizes', document.getElementById('productSizes').value);
  formData.append('image', document.getElementById('productImages').files[0]); // Note the change here

  // Send data to server
  fetch('/admin/products/add', {
    method: 'POST',
    body: formData, // No headers needed, as FormData sets the correct Content-Type
  })
  .then(response => response.json())
  .then(data => {
    console.log('Success:', data);
    $('#addProductModal').modal('hide');
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

    </script>
    