<!-- Assuming you have an array of products passed to the EJS template as 'products' -->

<style>
    .orders{
        margin-left: 270px;
    }
    
    .table-container {
        border: 1px solid #ddd; /* Border for the entire table */
    }

    th {
        background-color: lightblue; /* Background color for the header cells */
    }

    tr:nth-child(even) {
        background-color: lightgrey; /* Background color for every second row */
    }

    td, th {
        border: 1px solid #ddd; /* Border for each cell */
        padding: 8px; /* Adjust the padding as needed */
        text-align: left;
    }
    .editable {
        border: 1px solid #ddd;
        padding: 8px;
    }

    /* Dropdown */

.dropdown {
  display: inline-block;
  position: relative;
}

.dd-button {
  display: inline-block;
  border: 1px solid gray;
  border-radius: 4px;
  padding: 10px 30px 10px 20px;
  background-color: #ffffff;
  cursor: pointer;
  white-space: nowrap;
}

.dd-button:after {
  content: '';
  position: absolute;
  top: 50%;
  right: 15px;
  transform: translateY(-50%);
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid black;
}

.dd-button:hover {
  background-color: #eeeeee;
}


.dd-input {
  display: none;
}

.dd-menu {
  position: absolute;
  top: 100%;
  left: -80px;
  border: 1px solid #ccc;
  border-radius: 4px;
  padding: 0;
  margin: 2px 0 0 0;
  box-shadow: 0 0 6px 0 rgba(0,0,0,0.1);
  background-color: #ffffff;
  list-style-type: none;
}

.dd-input + .dd-menu {
  display: none;
} 

.dd-input:checked + .dd-menu {
  display: block;
} 

.dd-menu li {
  padding: 10px 20px;
  cursor: pointer;
  white-space: nowrap;
}

.dd-menu li:hover {
  background-color: #f6f6f6;
}

.dd-menu li a {
  display: block;
  margin: -10px -20px;
  padding: 10px 20px;
}

.dd-menu li.divider{
  padding: 0;
  border-bottom: 1px solid #cccccc;
}
/* Set a maximum width for the headers */
thead th {
    max-width: 150px; /* You can adjust this value as per your need */
    white-space: nowrap; /* Prevent text from wrapping */
    overflow: hidden; /* Hide overflowed content */
    text-overflow: ellipsis; /* Add ellipsis for overflowed content */
}

/* Optional: Set a smaller width for specific headers */
thead th:nth-child(1) {
    max-width: 100px; /* Adjust this value for the first header */
}

thead th:nth-child(2) {
    max-width: 120px; /* Adjust this value for the second header */
}

/* Ensure input fields are still aligned with headers */
thead input {
    width: 100%; /* Input fields take full width of their container */
    box-sizing: border-box; /* Include padding and border in width */
}

.search-button {
    padding: 5px 10px;
    background-color: #007bff;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

.search-button:hover {
    background-color: #0056b3;
}

</style>

<%- include('../components/sidebar') %>

  
 <!-- Add Product Modal -->
<div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="addProductModalLabel">Add New Product</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
           
            <div class="modal-body">
                <form id="addProductForm" enctype="multipart/form-data">
                    <div class="form-group">
                        <label for="productName">Name</label>
                        <input type="text" class="form-control" id="productName" required>
                    </div>
                    <div class="form-group">
                        <label for="productComment">Kommentar</label>
                        <input type="text" class="form-control" id="productComment" required>
                    </div>
                    <div class="form-group">
                        <label for="hasMultiplePrices">Hat mehrere Preise?</label>
                        <select class="form-control" id="hasMultiplePrices" onchange="toggleMultiplePrices(this.value)">
                            <option value="no">No</option>
                            <option value="yes">Yes</option>
                        </select>
                    </div>
                    <div class="form-group" id="multiplePricesContainer" style="display: none;">
                        <label for="productMultiplePrices">Preise (separiert durch Kommas: 10.5, 12.5 etc..)</label>
                        <input type="text" class="form-control" id="productMultiplePrices">
                    </div>
                    <div class="form-group">
                        <label for="productPrice">Preis (nur bei einem Preis nutzen)</label>
                        <input type="number" step="0.10" class="form-control" id="productPrice" required>
                    </div>
                    <div class="form-group">
                        <label for="productSizes">Größen (10.5 mm, 3.5mm etc...)</label>
                        <input type="text" class="form-control" id="productSizes" required>
                    </div>
                    <div class="form-group">
                        <label for="productLabel">Label</label>
                        <select class="form-control" id="productLabel" required>
                            <option value="available">available</option>
                            <option value="sold out">sold out</option>
                            <option value="new">New</option>
                            <option value="back in">Back In</option>
                            <option value="wsl">WSL</option>
                        </select>
                    </div>
                    <div class="form-group ">
                        <label for="productImages">Bilder</label>
                        <input type="file" class="form-control " id="productImages" name="image" multiple required>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" onclick="addProduct()">Add Product</button>
            </div>
        </div>
    </div>
</div>

<script>
function toggleMultiplePrices(value) {
    const multiplePricesContainer = document.getElementById('multiplePricesContainer');
    if (value === 'yes') {
        multiplePricesContainer.style.display = 'block';
    } else {
        multiplePricesContainer.style.display = 'none';
    }
}

</script>



<section class="lg:ml-80 light-section   mt-12  lg:mr-8">
    
    <div class=" mx-auto pt-10 pb-2 table-container px-3 w-11/12">
        <h1 class="font-bold text-2xl mb-4 margin align-center">All Products</h1>
        <div class="flex flex-col sm:flex-row justify-between items-center mb-1.5">

            <div class="flex justify-between items-center w-full">

                <button type="button" class="btn btn-primary mb-4 md:mb-0" data-toggle="modal" data-target="#addProductModal">
                    Add Product
                </button>
                <% if (!searchQuery) { %>
                    
                    <form id="sortForm" action="/admin/products" method="GET" class="sm:hidden">
                        <label class="dropdown">
                        <div class="dd-button">Sort By</div>
                        <input type="checkbox" class="dd-input" id="test">
                        <ul  class="dd-menu z-20">
                            <li id="price-low-to-high1" data-value="price-low-to-high1">Price, low to high</li>
                            <li id="price-high-to-low1" data-value="price-high-to-low1">Price, high to low</li>
                            <li id="name-a-z1" data-value="name-a-z1">Alphabetically, A - Z</li>
                            <li id="name-z-a1" data-value="name-z-a1">Alphabetically, Z - A</li>
                        </ul>
                        
                        <input type="hidden" name="sort" id="sortInput">
                    </label>
                </form>
                <% } %>
            </div>
        
    </div>
    <% if (!searchQuery) { %>
        <div  class="hidden sm:flex justify-end items-center mb-3">
            <form id="sortForm" action="/admin/products" method="GET">
            <label class="dropdown">
                <div class="dd-button">Sort By</div>
                <input type="checkbox" class="dd-input" id="test">
                <ul  class="dd-menu z-20">
                    <li id="price-low-to-high" data-value="price-low-to-high">Price, low to high</li>
                    <li id="price-high-to-low" data-value="price-high-to-low">Price, high to low</li>
                    <li id="name-a-z" data-value="name-a-z">Alphabetically, A - Z</li>
                    <li id="name-z-a" data-value="name-z-a">Alphabetically, Z - A</li>
                </ul>
                
                <input type="hidden" name="sort" id="sortInput">
            </label>
        </form>
    </div>
    <% } %>
        <div class="overflow-auto">

            <table class="w-full table-auto bg-white">
                <thead>
                <tr>
                    <th class="px-4 py-2">Name</th>
                    <th class="px-4 py-2">Comment</th>
                    <th class="px-4 py-2">Unit Price (€)</th>
                    <th class="px-4 py-2">Sizes</th>
                    <th class="px-4 py-2">Label</th>
                    <th class="px-4 py-2">Label expiry</th>
                    <th class="px-4 py-2">Checked</th>
                    <th class="px-4 py-2">Actions</th>
                </tr>
                <tr>
                    <th class="px-3 py-2"><input type="text" id="filter-name" placeholder="Filter by Name"></th>
                    <th class="px-3 py-2"><input type="text" id="filter-comment" placeholder="Filter by Comment"></th>
                    <th class="px-3 py-2"><input type="number" id="filter-price" placeholder="Filter by Price"></th>
                    <th class="px-3 py-2"><input type="text" id="filter-sizes" placeholder="Filter by Sizes"></th>
                    
                    <!-- Label Filter Dropdown -->
                    <th class="px-3 py-2">
                        <select id="filter-label">
                            <option value="">All</option>
                            <option value="available">available</option>
                            <option value="sold out">sold out</option>
                            <option value="new">new</option>
                            <option value="back in">back in</option>
                            <option value="wsl">wsl</option>
                        </select>
                    </th>
                    
                    <th class="px-3 py-2"><input type="text" id="filter-expiry" placeholder="Filter by Expiry"></th>
                    
                    <!-- Checked Filter Dropdown -->
                    <th class="px-3 py-2">
                        <select id="filter-checked">
                            <option value="">All</option>
                            <option value="true">True</option>
                            <option value="false">False</option>
                        </select>
                    </th>
                    
                    <th class="px-3 py-2">
                        <!-- Search button in the Actions column -->
                        <button id="search-button" class="search-button">🔍 Search</button>
                    </th>
                </tr>                
                
            </thead>
            <tbody>
                <%products.forEach((product, index) => { %>
                    <tr class="row-<%= index %>">
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">
                            <a href="/admin/product/<%= product._id %>"><%= product.name %></a>
                        </td>            
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.comment %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.price %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>"><%= product.sizes %></td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">
                            <select class="availability-select" data-product-id="<%= product._id %>" onchange="updateAvailability(this)">
                                <option value="AVAILABLE" <%= product.availability === 'AVAILABLE' ? 'selected' : '' %>>AVAILABLE</option>
                                <option value="SOLDOUT" <%= product.availability === 'SOLDOUT' ? 'selected' : '' %>>SOLD OUT</option>
                                <option value="NEW" <%= product.availability === 'NEW' ? 'selected' : '' %>>NEW</option>
                                <option value="BACK IN" <%= product.availability === 'BACK IN' ? 'selected' : '' %>>BACK IN</option>
                                <option value="WSL" <%= product.availability === 'WSL' ? 'selected' : '' %>>WSL</option>
                                <option value="HIDDEN" <%= product.availability === 'HIDDEN' ? 'selected' : '' %>>HIDE</option>
                            </select>
                        </td>
                        <td class="editable" contenteditable="false" data-product-id="<%= product._id %>">    <%= product.expiry %></td>
                        <td class="">
                            <div class="flex justify-center items-center">

                                <input type="checkbox" class="product-checkbox" data-product-id="<%= product._id %>" <%= product.isChecked ? 'checked' : '' %> onchange="toggleChecked(this)">
                            </div>
                        </td>
                        <td class="">
                            <button class="edit-button w-full mb-1 block" data-product-id="<%= product._id %>" data-row-index="<%= index %>">Edit</button>
                            <button class="delete-button  w-full block" data-product-id="<%= product._id %>" data-row-index="<%= index %>">Delete</button>
                        </td>
                    </tr>
                    <% }); %>
                </tbody>
                
            </table>
        </div>
            
    </div>
    <% 
    // Calculate the starting and ending page numbers for the pagination
    let pageStart = Math.max(currentPage - 2, 1);
    let pageEnd = Math.min(currentPage + 2, totalPages);
%>

<div class="pagination-container">
    <!-- Previous Page Link -->
    <a href="<%= currentPage > 1 ? `/admin/products?page=${currentPage - 1}&${queryString}` : '#' %>"
       class="pagination-button <%= currentPage === 1 ? 'disabled' : '' %>">
        &#10094;
    </a>

    <!-- First Page and Ellipsis if necessary -->
    <% if (pageStart > 1) { %>
        <a href="/admin/products?page=1&<%= queryString %>" class="pagination-button">1</a>
        <% if (pageStart > 2) { %>
            <span class="pagination-ellipsis">...</span>
        <% } %>
    <% } %>

    <!-- Page Numbers -->
    <% for(let i = pageStart; i <= pageEnd; i++) { %>
        <a href="/admin/products?page=<%= i %>&<%= queryString %>"
           class="pagination-button <%= i === currentPage ? 'active' : '' %>">
            <%= i %>
        </a>
    <% } %>

    <!-- Ellipsis and Last Page -->
    <% if (pageEnd < totalPages) { %>
        <% if (pageEnd < totalPages - 1) { %>
            <span class="pagination-ellipsis">...</span>
        <% } %>
        <a href="/admin/products?page=<%= totalPages %>&<%= queryString %>" class="pagination-button"><%= totalPages %></a>
    <% } %>

    <!-- Next Page Link -->
    <a href="<%= currentPage < totalPages ? `/admin/products?page=${currentPage + 1}&${queryString}` : '#' %>"
       class="pagination-button <%= currentPage === totalPages ? 'disabled' : '' %>">
        &#10095;
    </a>
</div>



<div class="modal fade" id="confirmationModal" tabindex="-1" aria-labelledby="confirmationModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="confirmationModalLabel">Confirm Deletion</h5>
          <button type="button" class="close" data-dismiss="modal" aria-label="Close">
            <span aria-hidden="true">&times;</span>
          </button>
        </div>
        <div class="modal-body">
          Are you sure you want to delete this product?
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
          <button type="button" class="btn btn-danger" id="confirmDelete">Delete</button>
        </div>
      </div>
    </div>
  </div>
  
    
<style>

.product-checkbox {
    width: 16px;
    height: 16px;
    cursor: pointer;
    position: relative;
}

.product-checkbox:checked::before {
    content: '\2713'; /* Unicode for a tick */
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background-color: green;
    color: white;
    font-size: 14px;
    border-radius: 3px;
}

.edit-button, .delete-button {
    margin-right: 5px;
    padding: 5px 10px;
    font-size: 14px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
    /* width: 100; */
}

.edit-button {
    background-color: #4CAF50; /* Green */
    color: white;
    
}

.delete-button {
    background-color: #f44336; /* Red */
    color: white;
}

.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
}

.pagination-button {
    display: inline-block;
    padding: 8px 16px;
    margin: 0 5px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 50%;
    transition: background-color 0.3s, border-color 0.3s;
}

.pagination-button:hover:not(.disabled) {
    cursor: pointer;
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}

.pagination-button.active {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}

.pagination-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.pagination-ellipsis {
    color: #333;
    padding: 8px 16px;
}

.product-checkbox {
        width: 16px;
        height: 16px;
        cursor: pointer;
        position: relative;
    }

    .product-checkbox:checked::before {
        content: '\2713'; /* Unicode for a tick */
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: green;
        color: white;
        font-size: 14px;
        border-radius: 3px;
    }
    
.edit-button, .delete-button {
    margin-right: 5px;
    padding: 5px 10px;
    font-size: 14px;
    border: none;
    border-radius: 3px;
    cursor: pointer;
}
.edit-button {
    background-color: #4CAF50; /* Green */
    color: white;
}

.delete-button {
    background-color: #f44336; /* Red */
    color: white;
}
.pagination-container {
    display: flex;
    justify-content: center;
    align-items: center;
}
.pagination-button {
    display: inline-block;
    padding: 8px 16px;
    margin: 0 5px;
    text-decoration: none;
    border: 1px solid #ddd;
    border-radius: 50%;
    transition: background-color 0.3s, border-color 0.3s;
}
.pagination-button:hover:not(.disabled) {
    cursor: pointer;
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}
.pagination-button.active {
    background-color: #007bff;
    border-color: #007bff;
    color: white;
}
.pagination-button.disabled {
    opacity: 0.5;
    cursor: not-allowed;
}
.pagination-ellipsis {
    color: #333;
    padding: 8px 16px;
}
</style>
    


<script>
    var productsData = <%- JSON.stringify(products) %>;

    //search query 
    document.addEventListener('DOMContentLoaded', function () {
           const table = document.querySelector('table');
    const searchInput = document.getElementById('search-input');

    document.querySelectorAll('.availability-select').forEach(selectElement => {
        selectElement.addEventListener('change', function() {
            const productId = this.getAttribute('data-product-id');
            const updatedAvailability = this.value;
            updateProduct(productId, { availability: updatedAvailability });
        });
    });

    searchInput.addEventListener('input', function () {
        const searchTerm = searchInput.value.trim().toLowerCase();

        // Replace 'products' with 'productsData'
        productsData.forEach(function (product, index) {
            const productName = product.name.toLowerCase();
            const productComment = product.comment.toLowerCase();

            const productRow = document.querySelector(`table tbody tr:nth-child(${index + 1})`);
            if (productName.includes(searchTerm) || productComment.includes(searchTerm)) {
                productRow.style.display = ''; // Show the row
            } else {
                productRow.style.display = 'none'; // Hide the row
            }
        });
    });

    let currentProductId = null; // Temporary storage for the product ID to be deleted

    document.addEventListener('click', function(event) {
        if (event.target.classList.contains('delete-button')) {
            currentProductId = event.target.getAttribute('data-product-id'); // Store the product ID
            $('#confirmationModal').modal('show'); // Show the confirmation modal
        }
    });

    // Confirm deletion
    document.getElementById('confirmDelete').addEventListener('click', function() {
        if (currentProductId) {
            fetch(`/admin/products/delete/${currentProductId}`, {
                method: 'DELETE',
            })
            .then(response => {
                if (response.ok) {
                    alert('Product deleted successfully');
                    $('#confirmationModal').modal('hide'); // Hide the modal
                    // Optionally, remove the row from the table or update the UI
                } else {
                    alert('There was an error deleting the product');
                }
                currentProductId = null; // Reset the currentProductId
            })
            .catch(error => {
                console.error('Error:', error);
                currentProductId = null; // Reset the currentProductId
            });
        }
    });
});


function toggleRowEdit(rowIndex, button) {
    var cells = document.querySelectorAll('.row-' + rowIndex + ' .editable');
    var isEditing = button.textContent === 'Edit';

    if (isEditing) {
        // Switch to edit mode
        cells.forEach(cell => cell.setAttribute('contenteditable', 'true'));
        button.textContent = 'Save';
    } else {
        // Save changes
        var editedData = {
            productId: cells[0].getAttribute('data-product-id'), // Assuming first cell contains the product ID
            rowIndex: rowIndex,
            editedValues: Array.from(cells).map(cell => cell.textContent) // Get text from each cell
        };

        // Send data to server
        updateProduct(editedData);

        // Switch back to view mode
        cells.forEach(cell => cell.setAttribute('contenteditable', 'false'));
        button.textContent = 'Edit';
    }
}

function updateAvailability(selectElement) {
    const productId = selectElement.getAttribute('data-product-id');
    const newAvailability = selectElement.value;

    // Create the data object to send to the server
    const dataToSend = {
        productId: productId,
        availability: newAvailability,
    };

    fetch('/change-availability', { // Replace with the actual path to your update endpoint
        method: 'POST', // Or 'PUT', depending on your server configuration
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(dataToSend),
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(data => {
        console.log('Success:', data);
        // Additional actions upon successful update, like notifying the user
    })
    .catch((error) => {
        console.error('Error:', error);
        // Handle the error, possibly by notifying the user
    });
}


function updateProduct(data) {
    fetch('/change-product', { // Replace with the actual URL
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: data.productId,
            rowIndex: data.rowIndex,
            editedValue: {
                name: data.editedValues[0], // Assuming first cell is 'name'
                comment: data.editedValues[1], // Assuming second cell is 'comment'
                price: data.editedValues[2], // Assuming third cell is 'price'
                sizes: data.editedValues[3], // Assuming fourth cell is 'sizes'
                availability: data.editedValues[4] // Assuming fifth cell is 'availability'
            }
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}



    // Add event listeners to edit buttons
    document.querySelectorAll('.edit-button').forEach(function(button) {
        button.addEventListener('click', function() {
            var rowIndex = this.getAttribute('data-row-index');
            toggleRowEdit(rowIndex, this);
        });
    });

    function addProduct() {
  // Create FormData object
  var formData = new FormData();
  formData.append('name', document.getElementById('productName').value);
  formData.append('comment', document.getElementById('productComment').value);
  formData.append('label', document.getElementById('productLabel').value);
  formData.append('sizes', document.getElementById('productSizes').value);
      // Check if the product has multiple prices
    if (document.getElementById('hasMultiplePrices').value === 'yes') {
        formData.append('price', document.getElementById('productMultiplePrices').value);
    } else {
        formData.append('price', document.getElementById('productPrice').value);
    }
    // Get the selected files from the file input
      var files = document.getElementById('productImages').files;
    for (var i = 0; i < files.length; i++) {
        formData.append('images', files[i]);
    }

  // Send data to server
  fetch('/admin/products/add', {
    method: 'POST',
    body: formData, // No headers needed, as FormData sets the correct Content-Type
  })
  .then(response => response.json())
  .then(data => {
    console.log('Success:', data);
    $('#addProductModal').modal('hide');
  })
  .catch((error) => {
    console.error('Error:', error);
  });
}

function toggleChecked(checkbox) {
    const productId = checkbox.getAttribute('data-product-id');
    const isChecked = checkbox.checked;

    fetch('/admin/products/update-checked', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({
            productId: productId,
            isChecked: isChecked
        }),
    })
    .then(response => response.json())
    .then(data => {
        console.log('Success:', data);
        // Optionally, update the UI or notify the user
    })
    .catch((error) => {
        console.error('Error:', error);
    });
}

document.addEventListener('DOMContentLoaded', function () {
    const searchButton = document.getElementById('search-button');

    searchButton.addEventListener('click', function () {
        // Get the values from all filter inputs
        const filters = {
            name: document.getElementById('filter-name').value.trim(),
            comment: document.getElementById('filter-comment').value.trim(),
            price: document.getElementById('filter-price').value.trim(),
            sizes: document.getElementById('filter-sizes').value.trim(),
            label: document.getElementById('filter-label').value.trim(),
            expiry: document.getElementById('filter-expiry').value.trim(),
            checked: document.getElementById('filter-checked').value.trim(),
        };

        // Convert the filters to query parameters
        const queryParams = new URLSearchParams(filters).toString();

        // Redirect to the filtered URL with pagination reset to page 1
        window.location.href = `/admin/products?page=1&${queryParams}`;
    });
});




// Function to update the product table with new data
function updateProductTable(products) {
    const tbody = document.querySelector('table tbody');
    tbody.innerHTML = ''; // Clear existing rows

    products.forEach((product, index) => {
        const row = `
        <tr class="row-${index}">
            <td class="editable">${product.name}</td>
            <td class="editable">${product.comment}</td>
            <td class="editable">${product.price}</td>
            <td class="editable">${product.sizes}</td>
            <td class="editable">${product.label}</td>
            <td class="editable">${product.expiry}</td>
            <td class="">
                <input type="checkbox" class="product-checkbox" ${product.checked ? 'checked' : ''}>
            </td>
            <td class="">
                <button class="edit-button">Edit</button>
                <button class="delete-button">Delete</button>
            </td>
        </tr>
        `;
        tbody.insertAdjacentHTML('beforeend', row);
    });
}


document.addEventListener('DOMContentLoaded', () => {

document.getElementById('price-low-to-high').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=price-low-to-high`;
});

document.getElementById('price-high-to-low').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=price-high-to-low`;
});

document.getElementById('name-a-z').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=name-a-z`;
});

document.getElementById('name-z-a').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=name-z-a`;
});
});

document.addEventListener('DOMContentLoaded', () => {

document.getElementById('price-low-to-high1').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=price-low-to-high`;
});

document.getElementById('price-high-to-low1').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=price-high-to-low`;
});

document.getElementById('name-a-z1').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=name-a-z`;
});

document.getElementById('name-z-a1').addEventListener('click', () => {
    window.location.href = `/admin/products?sort=name-z-a`;
});
});
    </script>
    